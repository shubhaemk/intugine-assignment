{"version":3,"sources":["assets/logo.svg","assets/warehouse.svg","assets/destination.svg","components/navbar/navbar-component.jsx","components/counter/counter-component.jsx","components/timeline/timeline-component.jsx","components/shipment/shipment-component.jsx","services/webService.js","services/sortServices.js","pages/home/home.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","src","Logo","alt","aria-hidden","Counter","delCount","intCount","oodCount","nfiCount","dexCount","currentData","updateCurrentData","updateCurrentTimeline","onClick","Timeline","currentTimeline","Destination","Warehouse","map","item","status_detail","key","time","Date","getDate","getMonth","getFullYear","getHours","getMinutes","Shipment","data","_id","scan","awbno","carrier","from","to","extra_fields","expected_delivery_date","current_status","config","headers","body","email","post","endPonint","Promise","resolve","reject","axios","then","response","catch","error","getCounter","length","delData","filter","current_status_code","intData","oodData","nfiData","dexData","Home","props","componentDidMount","WebService","setState","loaded","console","state","this","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.98bdedd7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.877653ae.svg\";","module.exports = __webpack_public_path__ + \"static/media/warehouse.1f5bfd3e.svg\";","module.exports = __webpack_public_path__ + \"static/media/destination.85f9fdcc.svg\";","import React from 'react';\nimport Logo from '../../assets/logo.svg';\n\n\nconst Navbar = () => (\n    <nav className=\"navbar\">\n        <p className=\"navbar__brand\">\n\n            <img className=\"navbar__brand--logo\" src={Logo} alt=\"logo\" />\n            <span className=\"navbar__brand--name\">Intugine</span>\n\n        </p>\n        <ul className=\"navbar-list\">\n\n            <li className=\"navbar-item\">Home</li>\n            <li className=\"navbar-item\">Brands</li>\n            <li className=\"navbar-item\">Transporters</li>\n            <li className=\"navbar-item navbar-item--profile\">\n                <i className=\"profile-icon fa fa-user-o\" aria-hidden=\"true\"></i>\n                <i className=\"profile-action fa fa-chevron-down\" aria-hidden=\"true\"></i>\n            </li>\n        </ul>\n    </nav>\n\n)\n\nexport default Navbar;","import React from 'react';\n\nconst Counter = ({\n    delCount,\n    intCount,\n    oodCount,\n    nfiCount,\n    dexCount,\n    currentData,\n    updateCurrentData,\n    updateCurrentTimeline\n    }) => (\n    <main className=\"counter\">\n        <div \n            className={`counter-box counter-box--${ currentData === 'delData' ? 'active' : ''}`} \n            onClick={() => {\n                updateCurrentTimeline(null);\n                updateCurrentData('delData');\n            }}\n        >\n            <p className=\"counter-box__text\">DEL</p>\n            <p className=\"counter-box__count\">{delCount}</p>\n        </div>\n        <div \n            className={`counter-box counter-box--${ currentData === 'intData' ? 'active' : ''}`} \n            onClick={() => {\n                updateCurrentTimeline(null);\n                updateCurrentData('intData');\n            }}\n        >\n            <p className=\"counter-box__text\">INT</p>\n            <p className=\"counter-box__count\">{intCount}</p>\n        </div>\n        <div \n            className={`counter-box counter-box--${ currentData === 'oodData' ? 'active' : ''}`} \n            onClick={() => {\n                updateCurrentTimeline(null);\n                updateCurrentData('oodData');\n            }}\n        >\n            <p className=\"counter-box__text\">OOD</p>\n            <p className=\"counter-box__count\">{oodCount}</p>\n        </div>\n        <div \n            className={`counter-box counter-box--${ currentData === 'dexData' ? 'active' : ''}`} \n            onClick={() => {\n                updateCurrentTimeline(null);\n                updateCurrentData('dexData');\n            }}\n        >\n            <p className=\"counter-box__text\">DEX</p>\n            <p className=\"counter-box__count\">{dexCount}</p>\n        </div>\n        <div \n            className={`counter-box counter-box--${ currentData === 'nfiData' ? 'active' : ''}`} \n            onClick={() => {\n                updateCurrentTimeline(null);    \n                updateCurrentData('nfiData');\n            }}\n        >\n            <p className=\"counter-box__text\">NFI</p>\n            <p className=\"counter-box__count\">{nfiCount}</p>\n        </div>\n    </main>\n\n\n)\n\nexport default Counter;","import React, { Fragment } from 'react';\n\nimport Warehouse from '../../assets/warehouse.svg';\nimport Destination from '../../assets/destination.svg';\n\nconst Timeline = ({currentTimeline}) => {\n    if(currentTimeline){\n        return(\n            <section className=\"timeline\">\n                <div className=\"timeline-tracker\">\n                    <div className=\"timeline-tracker-container\">\n                        <img src={Destination} className=\"timeline-tracker-icon\" alt=\"Destination logo\"/>\n                    </div>\n                    <hr />\n                    <div className=\"timeline-tracker-container\">\n                        <img src={Warehouse} className=\"timeline-tracker-icon\" alt=\"Warehouse logo\"/>\n                    </div>\n                </div>\n                <div className=\"timeline-state\">\n\n                    {\n                        currentTimeline.map( item => {\n                            if(item.status_detail === 'DELIVERED'){\n                                return (\n                                    <div key={item.time} className=\"timeline-state__status status-active\">\n                                        <p className=\"timeline-status__status--name\">Delivered</p>\n                                        <p className=\"time-status__status--time\">\n                                            <span className=\"margin-right-one\">{`${(new Date(item.time)).getDate()}-${(new Date(item.time)).getMonth()}-${(new Date(item.time)).getFullYear()}`}</span>\n                                            <span className=\"time\">{`${(new Date(item.time).getHours())}:${new Date(item.time).getMinutes()}`}</span>\n                                        </p>\n                                    </div>\n                                )\n                            }else{\n                                return (\n                                    <Fragment key={item.time}/>\n                                )\n                            }\n                        })\n                    }\n                    {\n                        currentTimeline.map( item => {\n                            if(item.status_detail !== 'DELIVERED'){\n                                return (\n                                    <div key={item.time} className=\"timeline-state__status\">\n                                        <p className=\"timeline-status__status--name\">{item.status_detail}</p>\n                                        <p className=\"time-status__status--time\">\n                                            <span className=\"margin-right-one\">{`${(new Date(item.time)).getDate()}-${(new Date(item.time)).getMonth()}-${(new Date(item.time)).getFullYear()}`}</span>\n                                            <span className=\"time\">{`${(new Date(item.time).getHours())}:${new Date(item.time).getMinutes()}`}</span>\n                                        </p>\n                                    </div>\n                                )\n                            }else{\n                                return (\n                                    <Fragment key={item.time}/>\n                                )\n                            }\n                        })\n                    }\n                </div>\n            </section>\n        )\n    }else{\n        return(\n            <div className=\"timeline timeline-none\"/>\n        )\n    }\n}\n\nexport default Timeline;","import React, { Fragment } from 'react';\n\nconst Shipment = ({data, updateCurrentTimeline}) => {\n    return (\n        <section className=\"shipments\">\n            <div className=\"shipments__table \">\n                <ul>\n                    <li>AWB number</li>\n                    <li>Transporter</li>\n                    <li>Source</li>\n                    <li>Destination</li>\n                    <li>Brand</li>\n                    <li>Start Date</li>\n                    <li>ETO</li>\n                    <li>Status</li>\n                </ul>\n                <div className=\"shipments__content slim-scroll\">\n                    {\n                        data.map( item => {\n                            return(\n                                <ul \n                                    key={item._id}\n                                    className=\"package\"\n                                    onClick={() => updateCurrentTimeline(item.scan)}\n                                >\n                                    <li className=\"package--awb\">{item.awbno}</li>\n                                    <li className=\"package--transpoter\">{item.carrier}</li>\n                                    <li className=\"package--source\">{item.from}</li>\n                                    <li className=\"package--destination\">{item.to}</li>\n                                    <li className=\"package--brand\">{item.carrier}</li>\n                                    <li className=\"package--start\">\n                                        {`${(new Date(item.time).getDate())}/${(new Date(item.time).getMonth())}/${(new Date(item.time).getFullYear())}`}\n                                    </li>\n                                    <li className=\"package--eto\">\n                                        {\n                                            item.extra_fields ? \n                                            (\n                                                `${(new Date(item.extra_fields.expected_delivery_date).getDate())}/${(new Date(item.extra_fields.expected_delivery_date).getMonth())}/${(new Date(item.extra_fields.expected_delivery_date).getFullYear())}`\n                                            ) : \n                                            <Fragment/>\n                                        }\n                                    </li>\n                                    <li className=\"package--status\">{item.current_status}</li>\n                                </ul>\n                            )\n                        })\n                    }\n                </div>\n            </div>\n        </section>\n    )\n}\n\n\nexport default Shipment;","import axios from 'axios';\n\nconst config = {\n    headers : {\n        'Authorization': `Bearer tTU3gFVUdP`  \n    }\n}\n\nconst body = {\n    email : \"mayankmittal@intugine.com\" \n}\n\nconst post = endPonint => (\n    new Promise((resolve,reject) => {\n        axios.post(\n            endPonint,\n            body,\n            config\n        ).then( response => resolve(response.data.data)\n        ).catch( error => reject(error)\n        );\n    })\n)\n\nexport default {\n    post\n}","export const getCounter = data => (\n    new Promise((resolve,reject) => {\n        if(data.length){\n            const delData = data.filter( item => item.current_status_code === 'DEL');\n            const intData = data.filter( item => item.current_status_code === 'INT');\n            const oodData = data.filter( item => item.current_status_code === 'OOD');\n            const nfiData = data.filter( item => item.current_status_code === 'NFI');\n            const dexData = data.filter( item => item.current_status_code === 'DEX');\n            resolve({\n                delData,\n                intData,\n                oodData,\n                nfiData,\n                dexData\n            })\n        }else{\n            reject({\n                error : \"data not recieved\"\n            })\n        }\n    })\n);","import React, { Fragment } from 'react';\nimport Navbar from '../../components/navbar/navbar-component';\nimport Counter from '../../components/counter/counter-component';\nimport Timeline from '../../components/timeline/timeline-component';\nimport Shipment from '../../components/shipment/shipment-component';\nimport WebService from '../../services/webService';\nimport { getCounter } from '../../services/sortServices';\n\n\nclass Home extends React.Component{\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            loaded : false,\n            delData : null,\n            intData : null,\n            oodData : null,\n            nfiData : null,\n            dexData : null,\n            currentData : \"delData\",\n            currentTimeline : null\n        }\n    }\n\n    componentDidMount = () => {\n        WebService.post(\"https://93870v1pgk.execute-api.ap-south-1.amazonaws.com/latest/shipments/mayank\")\n        .then(response => {\n            return getCounter(response);\n        })\n        .then( data => {\n            const {\n                delData,\n                intData,\n                oodData,\n                nfiData,\n                dexData\n            } = data;\n\n            this.setState({\n                delData,\n                intData,\n                oodData,\n                nfiData,\n                dexData,\n                loaded : true\n            })\n        })\n        .catch(error => {\n            console.error(error);\n        })\n    }\n\n    updateCurrentData = currentData => {\n        this.setState({\n            currentData\n        })\n    }\n\n    updateCurrentTimeline = currentTimeline => {\n        this.setState({\n            currentTimeline\n        })\n    }\n\n    render(){\n        const { \n            loaded,\n            delData,\n            intData,\n            oodData,\n            nfiData,\n            dexData,\n            currentData,\n            currentTimeline\n        } = this.state;\n\n        if(loaded){\n            return(\n                <Fragment>\n                    <Navbar/>\n                    <Counter \n                        delCount = {delData.length}\n                        intCount = {intData.length}\n                        oodCount = {oodData.length}\n                        nfiCount = {nfiData.length}\n                        dexCount = {dexData.length}\n                        currentData = {currentData}\n                        updateCurrentData = {this.updateCurrentData}\n                        updateCurrentTimeline = {this.updateCurrentTimeline}\n                    />\n                    <div className=\"main-content\">\n                        <Timeline\n                            currentTimeline = { currentTimeline }\n                        />\n                        <Shipment \n                            data = {this.state[currentData]}\n                            updateCurrentTimeline = {this.updateCurrentTimeline}\n                        />\n                    </div>\n                </Fragment>\n            )\n        }else{\n            return(\n                <p>Loading...</p>\n            )\n        }\n    }\n}\n\nexport default Home;","import React from 'react';\nimport Home from './pages/home/home.component';\nimport \"../src/styles/main.scss\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n        <Home/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}